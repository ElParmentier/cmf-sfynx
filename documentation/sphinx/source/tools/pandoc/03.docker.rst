Docker
======

::

        https://docs.docker.com/engine/installation/ubuntulinux/

Installation
~~~~~~~~~~~~

.. code:: bash


        #!/bin/bash

        USER=$(ps -o user= -p $$ | awk '{print $1}')

        # update
        sudo apt-get update

        # install docker
        sudo apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D

        sudo touch /etc/apt/sources.list.d/docker.list
        sudo chmod 777 /etc/apt/sources.list.d/docker.list
        echo "deb https://apt.dockerproject.org/repo ubuntu-trusty main" >> /etc/apt/sources.list.d/docker.list

        sudo apt-get update

        sudo apt-get install docker-engine

        # install docker compose
        sudo touch /usr/local/bin/docker-compose
        sudo chmod 777 /usr/local/bin/docker-compose
        sudo curl -L https://github.com/docker/compose/releases/download/1.5.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

        # Add the docker group if it doesn't already exist.
        sudo groupadd docker

        # Add the connected user "${USER}" to the docker group.
        # Change the user name to match your preferred user.
        # You may have to logout and log back in again for
        # this to take effect.
        sudo gpasswd -a ${USER} docker

        sudo service docker start
        sudo chmod 777 /var/run/docker.sock

        # Restart the Docker daemon.
        sudo service docker restart

docker deb-proxy install
^^^^^^^^^^^^^^^^^^^^^^^^

**Links** :

-  https://github.com/yasn77/docker-squid-repo-cache/
-  https://github.com/DerMitch/docker-deb-proxy

**Create container** :

.. code:: bash

    sudo mkdir -p /usr/local/docker/cache
    docker run --restart=always --name proxy  -v /usr/local/docker/cache -p 3131:8000 pmoust/squid-deb-proxy

General commands
~~~~~~~~~~~~~~~~

**List of images**

::

    docker images

**List of containers**

::

    docker ps -a

**Logs of a container**

::

    docker logs <Name>

**Config of a container**

::

    docker inspect <Name>

**Delete image**

::

    docker rmi -f <IDImage>

Specific commands
~~~~~~~~~~~~~~~~~

**Lancer l'environnement de développement (en arrière plan)**

::

    docker-compose -f config/docker/stack/apache-dev/docker-compose.yml -p dossier_web up -d 

**Lister les containers**

::

    docker-compose -f config/docker/stack/apache-dev/docker-compose.yml -p dossier_web ps 

**Voir les logs de container (ex. pour le container web)**

::

    docker-compose -f config/docker/stack/apache-dev/docker-compose.yml -p dossier_web logs web 

**Arrêter les containers**

::

    docker-compose -f config/docker/stack/apache-dev/docker-compose.yml -p dossier_web stop 

**Relancer les containers**

::

    docker-compose -f config/docker/stack/apache-dev/docker-compose.yml -p dossier_web start 

**Supprimer les containers**

::

    docker-compose -f config/docker/stack/apache-dev/docker-compose.yml -p dossier_web rm 

**Reconstruire l'envionnement (sans cache docker)**

::

    docker-compose -f config/docker/stack/apache-dev/docker-compose.yml -p dossier_web build --no-cache 

**Récupérer l'IP du container Web**

::

    docker inspect -f {{.NetworkSettings.IPAddress}} dossier_web_1

**Récupérer l'IP du container Db**

::

    docker inspect -f {{.NetworkSettings.IPAddress}} dossier_db_1

**Entre dans un container (ex. pour le container db)**

::

    docker exec -ti dossier_db_1 /bin/bash
    docker exec -ti dossier_db_1 sh  # pour un container de type alpine

**Kill all running containers (non conseillé)**

::

    docker kill $(docker ps -q)

**Stop all running containers**

::

    docker stop $(docker ps -a -q)

**Delete all stopped containers (including data-only containers)**

::

    docker rm $(docker ps -a -q)

**Delete all ‘untagged/dangling’ () images**

::

    docker rmi -f $(docker images -q -f dangling=true)

**Delete all images**

::

    docker rmi -f $(docker images -q)

**launch top in live from container**

::

    @watch -n 0,01 "docker top $(name)"

SSH key install
~~~~~~~~~~~~~~~

**Edit your Dockerfile to install an SSH public key** :

::

        ## Install an SSH of your choice.
        ADD your_key.pub /tmp/your_key.pub
        RUN cat /tmp/your_key.pub >> /root/.ssh/authorized_keys && rm -f /tmp/your_key.pub

**Then rebuild your image. Once you have that, start a container based
on that image** :

::

        docker run your-image-name

**Find out the ID of the container that you just ran** :

::

        docker ps

**Once you have the ID, look for its IP address with** :

::

        docker inspect -f "{{ .NetworkSettings.IPAddress }}" <ID>

**Now that you have the IP address, you can use SSH to login to the
container, or to execute a command inside it** :

::

        # Login to the container
        ssh -i /path-to/your_key root@<IP address>

        # Running a command inside the container
        ssh -i /path-to/your_key root@<IP address> echo hello world

**create VOLUME** tous les noeuds du cluster (swarm) voie le volume
quelque soit le network du container

::

        docker volume create --name lighttp

path of the data

::

    /var/lib/docker/volumes/lighttpd/_data
