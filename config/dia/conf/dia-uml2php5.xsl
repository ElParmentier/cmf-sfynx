<?xml version="1.0"?>
<!-- 
     Transform dia UML objects to PHP5 classes 

     Copyright(c) 2003-2005 KDO <kdo@zpmag.com>

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

-->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	version="1.0">

	<xsl:output method="text"/>

	<xsl:param name="directory"/>

	<xsl:include href="dia-uml2php5.conf.xsl"/>
	
  <!-- Default visibility of attrs and ops -->
  <xsl:param name="visibility" select="'private'"/>

<xsl:template match="class">
	<xsl:variable name="nbattr" select="count(attributes/attribute)"/>
	<xsl:variable name="nboper" select="count(operations/operation)"/>
	<xsl:choose>
		<xsl:when  test="$nbattr=0 and $nboper=0">
		</xsl:when>
		<xsl:when  test="@stereotype='interface'">
  			<xsl:call-template name="BEGIN">
				<xsl:with-param name="EXTENSION" select="$INTERFACE_FILE_EXTENSION"/>
			</xsl:call-template>
		</xsl:when>
		<xsl:otherwise>
  			<xsl:call-template name="BEGIN">
				<xsl:with-param name="EXTENSION" select="$CLASS_FILE_EXTENSION"/>
			</xsl:call-template>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template name="BEGIN">
	<xsl:param name="EXTENSION"/>
	<xsl:document href="{$directory}{@name}{$EXTENSION}" method="text">	
	<xsl:value-of select="concat('&lt;?php',$_CR)"/>
	<xsl:value-of select="concat('/**',$_CR)"/>
	<xsl:if test="comment">
		<xsl:value-of select="concat(' * ',comment,$_CR)"/>
	</xsl:if>
	<xsl:value-of select="concat(' * Code skeleton generated by dia-uml2php5 plugin',$_CR)"/>
	<xsl:value-of select="concat(' * written by KDO kdo@zpmag.com',$_CR)"/>
	<xsl:if test="not($_AUTHOR_='undefined')">
		<xsl:value-of select="concat(' * @author     ',$_AUTHOR_,$_CR)"/>
	</xsl:if>
	<xsl:if test="not($_COPYRIGHT_='undefined')">
		<xsl:value-of select="concat(' * @copyright  ',$_COPYRIGHT_,$_CR)"/>
	</xsl:if>
	<xsl:if test="not($_LICENSE_='undefined')">
		<xsl:value-of select="concat(' * @license    ',$_LICENSE_,$_CR)"/>
	</xsl:if>
	<xsl:variable name="lid" select="@id"/>
	<xsl:variable name="pid" select="//inherit[@cid=$lid]/@pid"/>
	<xsl:variable name="rid" select="//realize[@cid=$lid]/@pid"/>
	<xsl:variable name="compid" select="//composition[@CMPCID=$lid]/@CMPPID"/>
	<xsl:variable name="aggid" select="//aggregation[@AGGCID=$lid]/@AGGPID"/>
	<xsl:variable name="assid" select="//association[@STARTID=$lid]/@ENDID"/>
	<xsl:variable name="classname" select="@name"/>
	<xsl:variable name="parentname" select="//class[@id=$pid]/@name"/>
	
	<xsl:if test="$pid!=''">
		<xsl:value-of select="concat(' * @see        ',$parentname,$_CR)"/>
	</xsl:if>
	<xsl:value-of select="concat(' */',$_CR)"/>
	<!-- Includes -->
	<xsl:if test="$pid!=''">
		<xsl:text>use </xsl:text>
		<xsl:value-of select="$parentname"/>
		<xsl:text>;</xsl:text>
		<xsl:value-of select="$_CR"/>
	</xsl:if>
	<xsl:if test="$rid!=''">
		<xsl:for-each select="//class[@id=$rid]">
			<xsl:if test="@stereotype='interface'">
			<xsl:call-template name="REQUIRE">
				<xsl:with-param name="EXTENSION" select="$INTERFACE_FILE_EXTENSION"/>
			</xsl:call-template>
			</xsl:if>
		</xsl:for-each>
	</xsl:if>
	<xsl:if test="$compid!=''">
		<xsl:for-each select="//class[@id=$compid]">
			<xsl:if test="not($pid=@id)">
			<xsl:call-template name="REQUIRE">
				<xsl:with-param name="EXTENSION" select="$CLASS_FILE_EXTENSION"/>
			</xsl:call-template>
			</xsl:if>
		</xsl:for-each>
	</xsl:if>
	<xsl:if test="$aggid!=''">
		<xsl:for-each select="//class[@id=$aggid]">
			<xsl:if test="not($pid=@id)">
			<xsl:call-template name="REQUIRE">
				<xsl:with-param name="EXTENSION" select="$CLASS_FILE_EXTENSION"/>
			</xsl:call-template>
		</xsl:if>
		</xsl:for-each>
	</xsl:if>
	<xsl:if test="$assid!=''">
		<xsl:for-each select="//class[@id=$assid]">
			<xsl:if test="not($pid=@id)">
			<xsl:call-template name="REQUIRE">
				<xsl:with-param name="EXTENSION" select="$CLASS_FILE_EXTENSION"/>
			</xsl:call-template>
			</xsl:if>
		</xsl:for-each>
	</xsl:if>

	<xsl:value-of select="$_CR"/>
	<xsl:if test="@abstract and @stereotype != 'interface'">		
		<xsl:text>abstract </xsl:text>
	</xsl:if>
	<xsl:if test="@stereotype='interface'">
		<xsl:variable name="interface" select="1"/>
		<xsl:value-of select="concat('interface ',@name,' {')"/>
		<xsl:value-of select="concat($_CR,$_CR)"/>
		<xsl:apply-templates select="operations" mode="interface"/>
		<xsl:value-of select="concat($_CR,'}')"/>
		<xsl:if test="$CLOSE_TAG='ON'">
			<xsl:value-of select="$_CR"/>
      	<xsl:text> </xsl:text>
		</xsl:if>
	</xsl:if>
	<xsl:if test="@stereotype='final'">
		<xsl:text>final </xsl:text>
	</xsl:if>
	<xsl:if test="@stereotype!='interface'">
		<xsl:value-of select="concat('class ',@name)"/>
		<!-- INHERITANCE -->
		<xsl:if test="$pid!=''">
			<xsl:value-of select="concat(' extends ',//class[@id=$pid]/@name)"/>
		</xsl:if>
		<!-- IMPLEMENTS -->
		<xsl:if test="$rid!=''">
      	<xsl:text> implements </xsl:text>
			<xsl:for-each select="//class[@id=$rid]">
				<xsl:value-of select="@name"/>
				<xsl:if test="not(position()=last())">
					<xsl:text>, </xsl:text>        
				</xsl:if>
			</xsl:for-each>
		</xsl:if>
		<xsl:value-of select="concat(' {',$_CR)"/>
			<xsl:if test="//class[@id=$pid]/@stereotype='final'">
				<xsl:text>// ERROR:PARENT IS DECLARED AS 'final' !</xsl:text>
			</xsl:if>
		<xsl:if test="$compid!=''">
			<xsl:call-template name="COMPATTR"/>
		</xsl:if>
 		<xsl:if test="$aggid!=''">
			<xsl:call-template name="AGGATTR"/>
		</xsl:if>
 		<xsl:if test="$assid!=''">
			<xsl:call-template name="ASSATTR"/>
		</xsl:if>
     <xsl:apply-templates select="attributes"/>
		<xsl:value-of select="$_CR"/>
 		<xsl:if test="$aggid!=''">
			<xsl:call-template name="AGGOPER"/>
		</xsl:if>
		<xsl:if test="$rid!=''">
			<xsl:for-each select="//class[@id=$rid]">
				<xsl:call-template name="EXPAND"/>
			</xsl:for-each>
		</xsl:if>
      <xsl:apply-templates select="operations"/>
		<xsl:if test="$AUTO_SETTERS_GETTERS='ON'">
			<xsl:call-template name="SETTER_GETTERS">
				<xsl:with-param name="CID" select="$lid"/>
			</xsl:call-template>
		</xsl:if>
		<xsl:value-of select="concat($_CR,'}')"/>
		<xsl:if test="$CLOSE_TAG='ON'">
			<xsl:value-of select="concat($_CR,' ')"/>
		</xsl:if>
	</xsl:if>
	</xsl:document>
</xsl:template>

<xsl:template name="REQUIRE">
	<xsl:param name="EXTENSION"/>
	<xsl:text>use </xsl:text>
	<xsl:value-of select="@name"/>
	<xsl:text>;</xsl:text>
	<xsl:value-of select="$_CR"/>
</xsl:template>

  <xsl:template match="operations">
    <xsl:if test="*[@visibility='private']">
      <xsl:apply-templates select="*[@visibility='private']"/>
    </xsl:if>
    <xsl:if test="*[@visibility='protected']">
      <xsl:apply-templates select="*[@visibility='protected']"/>
    </xsl:if>
    <xsl:if test="*[@visibility='public']">
      <xsl:apply-templates select="*[@visibility='public']"/>
    </xsl:if>
    <xsl:if test="*[not(@visibility)]">
      <xsl:apply-templates select="*[not(@visibility)]"/>
    </xsl:if>
  </xsl:template>
  
 	<!-- BEGIN INTERFACE OPERATIONS -->
<xsl:template match="operations" mode="interface">
	<xsl:for-each select="operation">
		<xsl:value-of select="concat($INDENT_STR,@visibility)"/>
		<xsl:value-of select="concat(' function ',name)"/>
     	<xsl:text>(</xsl:text>
		<xsl:for-each select="parameters/*">
			<xsl:call-template name="PARAMOBJ"/>
			<xsl:text> </xsl:text>
 			<xsl:if test="not(starts-with(name, '$'))">
				<xsl:text>$</xsl:text>
			</xsl:if>
			<xsl:value-of select="name"/>
			<xsl:if test="not(position()=last())">
				<xsl:text>, </xsl:text>        
			</xsl:if>
		</xsl:for-each>
		<xsl:value-of select="concat(');',$_CR)"/>
	</xsl:for-each>
</xsl:template>

 	<!-- BEGIN INTERFACES EXPAND OPERATIONS -->
<xsl:template name="EXPAND">
	<xsl:choose>
		<xsl:when test="@stereotype='interface' and $AUTO_EXPAND_INTERFACES='ON'">
			<xsl:value-of select="$INDENT_STR"/>
			<xsl:text>// Expanded interface : </xsl:text>        
			<xsl:value-of select="concat(@name,$_CR)"/>
			<xsl:apply-templates select="operations"/>
		</xsl:when>
		<xsl:when test="@stereotype='zend_interface'">
			<xsl:value-of select="$INDENT_STR"/>
			<xsl:text>// Expanded ZEND interface : </xsl:text>        
			<xsl:value-of select="concat(@name,$_CR)"/>
			<xsl:variable name="NAME" select="translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>
			<xsl:choose>
				<xsl:when test="$NAME='iterator'">
					<xsl:call-template name="ZEND_ITERATOR"/>
				</xsl:when>
				<xsl:when test="$NAME='recursiveiterator'">
					<xsl:call-template name="ZEND_RECURSIVEITERATOR"/>
				</xsl:when>
				<xsl:when test="$NAME='seekableiterator'">
					<xsl:call-template name="ZEND_SEEKABLEITERATOR"/>
				</xsl:when>
				<xsl:when test="$NAME='iteratoraggregate'">
					<xsl:call-template name="ZEND_ITERATORAGGREGATE"/>
				</xsl:when>
				<xsl:when test="$NAME='arrayaccess'">
					<xsl:call-template name="ZEND_ARRAYACCESS"/>
				</xsl:when>
			</xsl:choose>			
		</xsl:when>
	</xsl:choose>
</xsl:template>

 	<!-- BEGIN ATTRIBUTES -->
 <xsl:template match="attributes">
    <xsl:if test="*[@visibility='private']">
      <xsl:apply-templates select="*[@visibility='private']"/>
    </xsl:if>
    <xsl:if test="*[@visibility='protected']">
      <xsl:apply-templates select="*[@visibility='protected']"/>
    </xsl:if>
    <xsl:if test="*[@visibility='public']">
      <xsl:apply-templates select="*[@visibility='public']"/>
    </xsl:if>
    <xsl:if test="*[not(@visibility)]">
      <xsl:apply-templates select="*[not(@visibility)]"/>
    </xsl:if>
  </xsl:template>
 	<!-- END ATTRIBUTES -->
  
	<!-- BEGIN ATTRIBUTE -->
<xsl:template match="attribute">
	<xsl:if test="$GENERATE_DOC_TAGS='ON'">
		<xsl:if test="type!='const'">
			<xsl:call-template name="ATTRDOC"/>
		</xsl:if>
	</xsl:if>

    <xsl:value-of select="$INDENT_STR"/>
    <xsl:if test="not(@visibility)">
      <xsl:if test="$visibility=''">
        <xsl:message terminate="yes">
          You must set a valid visibility attribute for attribute <xsl:value-of select="name"/>
        </xsl:message>
      </xsl:if>
      <xsl:value-of select="$visibility"/>
    </xsl:if>
	<xsl:choose>
	 	<xsl:when test="type='const'">
			<xsl:text>const </xsl:text>
		</xsl:when>
		<xsl:otherwise>
			<xsl:value-of select="@visibility"/>
			<xsl:text> </xsl:text>
			<xsl:if test="@class_scope">
				<xsl:text>static </xsl:text>
			</xsl:if>
		</xsl:otherwise>
	</xsl:choose>
		<!-- GESTION DU PREFIX $ DES ATTRIBUTS -->
		<xsl:if test="type!='const'">
			<xsl:if test="not(starts-with(name, '$'))">
				<xsl:text> $</xsl:text>
			</xsl:if>
		</xsl:if>
		<xsl:value-of select="name"/>
		<xsl:if test="value">
			<xsl:text> = </xsl:text>
			<xsl:value-of select="value"/>
		</xsl:if>
		<xsl:value-of select="concat(';',$_CR)"/>
	</xsl:template>
	<!-- END ATTRIBUTE -->

	<xsl:template match="operation">
	<xsl:variable name="lid" select="../../@id"/>
	<xsl:variable name="pid" select="//inherit[@cid=$lid]/@pid"/>
	<xsl:variable name="classname" select="../../@name"/>
	<xsl:if test="$GENERATE_DOC_TAGS='ON'">
		<xsl:value-of select="concat($_CR,$INDENT_STR,'/**')"/>
		<xsl:if test="comment!=''">
			<xsl:value-of select="concat($_CR,$INDENT_STR)"/>
			<xsl:text> * </xsl:text>
			<xsl:value-of select="comment"/>
		</xsl:if>
      <xsl:value-of select="concat($_CR,$INDENT_STR)"/>
      <xsl:value-of select="concat(' * @access ',@visibility)"/>
      <xsl:for-each select="parameters/parameter">
			<xsl:value-of select="concat($_CR,$INDENT_STR)"/>
			<xsl:value-of select="concat(' * @param ',type,' ')"/>
			<xsl:if test="not(starts-with(name, '$'))">
				<xsl:text>$</xsl:text>
			</xsl:if>
      	<xsl:value-of select="concat(name,' ',comment)"/>
		</xsl:for-each>
		<xsl:if test="type!=''">
			<xsl:value-of select="concat($_CR,$INDENT_STR)"/>
			<xsl:value-of select="concat(' * @return ',type)"/>      
		</xsl:if>
		<xsl:value-of select="concat($_CR,$INDENT_STR)"/>
		<xsl:value-of select="concat(' */',$_CR,$_CR)"/>
    </xsl:if>

    <xsl:value-of select="$INDENT_STR"/>
    <xsl:if test="not(@visibility)">
      <xsl:if test="$visibility=''">
        <xsl:message terminate="yes">
          You must set a valid visibility attribute for method <xsl:value-of select="name"/>
        </xsl:message>
      </xsl:if>
      <xsl:value-of select="$visibility"/>
    </xsl:if>

    <xsl:value-of select="@visibility"/>
    <xsl:text> </xsl:text>

	<xsl:choose>
		<xsl:when test="@inheritance='leaf'">
			<xsl:text>final </xsl:text>
		</xsl:when>
		<xsl:when test="@inheritance='abstract'">
			<xsl:text>abstract </xsl:text>
		</xsl:when>      
	</xsl:choose>
	<xsl:variable name="inheritance" select="@inheritance"/>
    
    <xsl:if test="@class_scope">
      <xsl:text>static </xsl:text>
    </xsl:if>

	<xsl:text> function </xsl:text>
	<xsl:variable name="destruct" select="concat('~',$classname)"/>
	<xsl:choose>
		<xsl:when test="$classname=name and $TRANSLATE_CONSTRUCTOR='ON'">
			<xsl:text>__construct</xsl:text>
		</xsl:when>
		<!-- Added : 20041231 -->
		<xsl:when test="$destruct=name and $TRANSLATE_DESTRUCTOR='ON'">
			<xsl:text>__destruct</xsl:text>
		</xsl:when>

		<xsl:otherwise>
			<xsl:value-of select="name"/>
		</xsl:otherwise>
	</xsl:choose>


    <xsl:text>(</xsl:text>
    <xsl:for-each select="parameters/*">
	
		<!-- GESTION DU TYPE DES PARAMETRES -->
		<xsl:call-template name="PARAMOBJ"/>
	 	<xsl:if test="not(starts-with(name, '$'))">
				<xsl:text>$</xsl:text>
		</xsl:if>
      <xsl:value-of select="name"/>
      <xsl:if test="value">
        <xsl:text> = </xsl:text>
        <xsl:value-of select="value"/>
      </xsl:if>
      <xsl:if test="not(position()=last())">
        <xsl:text>, </xsl:text>        
      </xsl:if>
    </xsl:for-each>

	<xsl:text>)</xsl:text>
	<xsl:choose>
		<xsl:when test="$inheritance='abstract'">
			<xsl:value-of select="concat(' ;',$_CR)"/>
		</xsl:when>
		<xsl:otherwise>
		<xsl:value-of select="concat(' {',$_CR)"/>
		<xsl:if test="$pid!=''">
			<xsl:variable name="NOM" select="name"/>
			<xsl:if test="//class[@id=$pid]/operations/operation[@inheritance='leaf']/name=$NOM">
   			<xsl:value-of select="$INDENT_STR"/>
					<xsl:text>//ERROR: METHOD CAN'T BE OVERLOADED, PARENT HAS DECLARED IT 'final'!</xsl:text>
				</xsl:if>
			</xsl:if>
			<xsl:value-of select="concat($_CR,$INDENT_STR)"/>
			<xsl:value-of select="concat('}',$_CR,$_CR)"/>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template name="PARAMOBJ">
	<xsl:choose>
		<xsl:when test="starts-with(type, 'object')">
			<xsl:value-of select="substring-after(type, 'object ')"/>
			<xsl:text> </xsl:text>
		</xsl:when>
		<xsl:when test="contains('array boolean float integer string', 
			translate(type,'AEIOYBFGLNRST','aeioybfglnrst'))"></xsl:when>
		<xsl:when test="contains('callback double mixed number resource', 
			translate(type,'AEIOUBCDKLMNRSX','aeioubcdklmnrsx'))"></xsl:when>
		<xsl:otherwise>
			<xsl:value-of select="concat(type,' ')"/>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<!-- CREATION ATTRIBUT POUR COMPOSITION -->
<xsl:template name="COMPATTR">
	<xsl:variable name="lid" select="@id"/>
	<xsl:variable name="container" select="//composition[@CMPCID=$lid]/@CMPCID"/>
	<xsl:for-each select="//composition[@CMPCID=$container]">
	<xsl:variable name="component" select="@CMPPID"/>
		<xsl:variable name="cmprole" select="@ROLE"/>
		<xsl:variable name="vtype" select="//class[@id=$component]/@name"/>
		<xsl:if test="$COMPOSITION_IMPLICIT_NAMING='ON' or $cmprole!=''">
			<xsl:if test="$GENERATE_DOC_TAGS='ON'">
				<xsl:value-of select="concat($_CR,$INDENT_STR,'/**',$_CR)"/>
				<xsl:value-of select="concat($INDENT_STR,' * Component',$_CR)"/>
				<xsl:value-of select="concat($INDENT_STR,' * @var ',$vtype,$_CR)"/>
				<xsl:value-of select="concat($INDENT_STR,' * @access ')"/>
				<xsl:call-template name="VISU">
					<xsl:with-param name="role" select="$cmprole"/>
				</xsl:call-template>
				<xsl:value-of select="concat($_CR,$INDENT_STR,' */',$_CR)"/>
			</xsl:if>
			<xsl:choose>
				<xsl:when test="$cmprole!=''">
					<xsl:value-of select="$INDENT_STR"/>
					<xsl:call-template name="VISU">
						<xsl:with-param name="role" select="$cmprole"/>
					</xsl:call-template>
					<xsl:text> </xsl:text>
					<xsl:call-template name="ROLEVAR">
						<xsl:with-param name="role" select="$cmprole"/>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="concat($INDENT_STR,'private $O_',$vtype)"/>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:call-template name="ROLEINIT">
				<xsl:with-param name="multi" select="@CMPMULTI"/>
			</xsl:call-template>
			<xsl:value-of select="concat(';',$_CR)"/>
		</xsl:if>
	</xsl:for-each>
</xsl:template>

<!-- CREATION ATTRIBUTS POUR AGGREGATION -->
<xsl:template name="AGGATTR">
	<xsl:variable name="lid" select="@id"/>
	<xsl:variable name="container" select="//aggregation[@AGGCID=$lid]/@AGGCID"/>
	<xsl:for-each select="//aggregation[@AGGCID=$container]">
		<xsl:variable name="component" select="@AGGPID"/>
		<xsl:variable name="aggrole" select="@ROLE"/>
		<xsl:variable name="vtype" select="//class[@id=$component]/@name"/>
		
		<xsl:if test="$AGGREGATION_IMPLICIT_NAMING='ON' or $aggrole!=''">
			<xsl:if test="$GENERATE_DOC_TAGS='ON'">
				<xsl:value-of select="concat($_CR,$INDENT_STR)"/>
				<xsl:value-of select="concat('/**',$_CR,$INDENT_STR)"/>
				<xsl:value-of select="concat(' * Component',$_CR,$INDENT_STR)"/>
				<xsl:value-of select="concat(' * @var ',$vtype)"/>
				<xsl:value-of select="concat($_CR,$INDENT_STR)"/>
				<xsl:text> * @access </xsl:text>
				<xsl:call-template name="VISU">
					<xsl:with-param name="role" select="$aggrole"/>
				</xsl:call-template>
				<xsl:value-of select="concat($_CR,$INDENT_STR)"/>
				<xsl:value-of select="concat(' */',$_CR)"/>
			</xsl:if>
			<xsl:choose>
				<xsl:when test="$aggrole!=''">
					<xsl:value-of select="$INDENT_STR"/>
					<xsl:call-template name="VISU">
						<xsl:with-param name="role" select="$aggrole"/>
					</xsl:call-template>
					<xsl:text> </xsl:text>
					<xsl:call-template name="ROLEVAR">
						<xsl:with-param name="role" select="$aggrole"/>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="concat($INDENT_STR,'private $O_',$vtype)"/>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:call-template name="ROLEINIT">
				<xsl:with-param name="multi" select="@AGGMULTI"/>
			</xsl:call-template>
			<xsl:value-of select="concat(';',$_CR)"/>
		</xsl:if>
	</xsl:for-each>
</xsl:template>

<!-- CREATE AGGREGATION METHODES -->
<xsl:template name="AGGOPER">
	<xsl:variable name="lid" select="@id"/>
	<xsl:variable name="aggid" select="//aggregation[@AGGCID=$lid]/@AGGPID"/>
	<xsl:variable name="container" select="//aggregation[@AGGCID=$lid]/@AGGCID"/>
	<xsl:for-each select="//aggregation[@AGGCID=$container]">
	<xsl:variable name="component" select="@AGGPID"/>
		<xsl:variable name="role" select="@ROLE"/>
		<xsl:variable name="vtype" select="//class[@id=$component]/@name"/>
		<xsl:if test="$AGGREGATION_IMPLICIT_NAMING='ON' or $role!=''">
			<xsl:if test="$GENERATE_DOC_TAGS='ON'">
				<xsl:value-of select="concat($_CR,$INDENT_STR)"/>
				<xsl:value-of select="concat('/**',$_CR,$INDENT_STR)"/>
				<xsl:value-of select="concat(' * AGGREGATION: accept ',$vtype)"/>
				<xsl:value-of select="concat(' element',$_CR,$INDENT_STR)"/>
				<xsl:value-of select="concat(' * @param ',$vtype,' $element',$_CR)"/>
				<xsl:value-of select="concat($INDENT_STR,' * @access public',$_CR)"/>
				<xsl:value-of select="concat($INDENT_STR,' */',$_CR,$_CR)"/>
			</xsl:if>
			
			<xsl:value-of select="concat($INDENT_STR,'public function accept_')"/>
			<xsl:variable name="attname" select="@ROLE"/>
			<xsl:choose>
				<xsl:when test="@ROLE!=''">
					<xsl:value-of select="normalize-space(translate($attname, '-+#$', '    '))"/>
					<xsl:text>(</xsl:text>
					<xsl:value-of select="$vtype"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="concat($vtype,'Element(',$vtype)"/>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:value-of select="concat(' $element) {',$_CR)"/>
			<xsl:value-of select="concat($INDENT_STR,$INDENT_STR,'$this->')"/>
			<xsl:variable name="multi" select="@AGGMULTI"/>
			<xsl:if test="@ROLE!=''">
				<xsl:value-of select="normalize-space(translate($attname, '-+#$', '    '))"/>
				<xsl:choose>
					<xsl:when test="$multi=''">
						<xsl:text> = </xsl:text>
					</xsl:when>
					<xsl:when test="$multi='1'">
						<xsl:text> = </xsl:text>
					</xsl:when>
					<xsl:when test="$multi='0..1'">
						<xsl:text> = </xsl:text>
					</xsl:when>
					<xsl:otherwise>
						<xsl:text>[] = </xsl:text>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:if>
			<xsl:if test="@ROLE=''">
				<xsl:value-of select="concat('O_',$vtype)"/>
				<xsl:choose>
					<xsl:when test="$multi=''">
						<xsl:text> = </xsl:text>
					</xsl:when>
					<xsl:when test="$multi='1'">
						<xsl:text> = </xsl:text>
					</xsl:when>
					<xsl:when test="$multi='0..1'">
						<xsl:text> = </xsl:text>
					</xsl:when>
					<xsl:otherwise>
						<xsl:text>[] = </xsl:text>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:if>
			<xsl:value-of select="concat('$element;',$_CR)"/>
			<xsl:value-of select="concat($INDENT_STR,'}',$_CR)"/>
		</xsl:if>
	</xsl:for-each>
</xsl:template>

<!-- CREATION ATTRIBUTS POUR ASSOCIATION -->
<xsl:template name="ASSATTR">
	<xsl:variable name="lid" select="@id"/>
	<xsl:variable name="assid" select="//association[@STARTID=$lid]/@STARTID"/>
	<xsl:for-each select="//association[@STARTID=$lid]">
		<xsl:variable name="end" select="@ENDID"/>
		<xsl:if test="@ROLE !=''">
			<xsl:if test="$GENERATE_DOC_TAGS='ON'">
				<xsl:value-of select="$_CR"/>
				<xsl:value-of select="concat($INDENT_STR,'/**',$_CR)"/>
				<xsl:value-of select="concat($INDENT_STR,' * Association',$_CR)"/>
				<xsl:value-of select="concat($INDENT_STR,' * @var ',//class[@id=$end]/@name,$_CR)"/>
				<xsl:value-of select="concat($INDENT_STR,' * @access ')"/>
				<xsl:call-template name="VISU">
					<xsl:with-param name="role" select="@ROLE"/>
				</xsl:call-template>
				<xsl:value-of select="concat($_CR,$INDENT_STR,' */',$_CR)"/>
			</xsl:if>
			<xsl:value-of select="$INDENT_STR"/>
			<xsl:call-template name="VISU">
				<xsl:with-param name="role" select="@ROLE"/>
			</xsl:call-template>
			<xsl:text> </xsl:text>
			<xsl:call-template name="ROLEVAR">
				<xsl:with-param name="role" select="@ROLE"/>
			</xsl:call-template>
			<xsl:call-template name="ROLEINIT">
				<xsl:with-param name="multi" select="@MULTI"/>
			</xsl:call-template>
			<xsl:value-of select="concat(';',$_CR)"/>
		</xsl:if>
	</xsl:for-each>
</xsl:template>

<xsl:template name="VISU">
	<xsl:param name="role"/>
	<xsl:variable name="visu" select="normalize-space(substring($role,1,1))"/>
	<xsl:choose>
		<xsl:when test="$visu='+'">
			<xsl:text>public</xsl:text>
		</xsl:when>
		<xsl:when test="$visu='-'">
			<xsl:text>private</xsl:text>
		</xsl:when>
		<xsl:when test="$visu='#'">
			<xsl:text>protected</xsl:text>
		</xsl:when>
		<xsl:otherwise>
			<xsl:text>public</xsl:text>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template name="ROLEVAR">
	<xsl:param name="role"/>
	<xsl:variable name="visu" select="normalize-space(substring($role,1,1))"/>
	<xsl:if test="not(contains($role, '$'))">
		<xsl:text>$</xsl:text>
	</xsl:if>
	<xsl:choose>
		<xsl:when test="$visu='+'">
			<xsl:value-of select="substring-after($role, '+')"/>
		</xsl:when>
		<xsl:when test="$visu='-'">
			<xsl:value-of select="substring-after($role, '-')"/>
		</xsl:when>
		<xsl:when test="$visu='#'">
			<xsl:value-of select="substring-after($role, '#')"/>
		</xsl:when>
		<xsl:otherwise>
			<xsl:value-of select="$role"/>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template name="ROLEINIT">
	<xsl:param name="multi"/>
	<xsl:choose>
		<xsl:when test="$multi=''">
			<xsl:text> = NULL </xsl:text>
		</xsl:when>
		<xsl:when test="$multi='1'">
			<xsl:text> = NULL </xsl:text>
		</xsl:when>
		<xsl:when test="$multi='0..1'">
			<xsl:text> = NULL </xsl:text>
		</xsl:when>
		<xsl:otherwise>
			<xsl:text> = array() </xsl:text>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template name="ATTRDOC">
	<xsl:value-of select="$_CR"/>
	<xsl:value-of select="concat($INDENT_STR,'/**',$_CR)"/>
	<xsl:value-of select="concat($INDENT_STR,' * ',comment,$_CR)"/>
	<xsl:value-of select="concat($INDENT_STR,' * @var ',type,$_CR)"/>
	<xsl:value-of select="concat($INDENT_STR,' * @access ',@visibility,$_CR)"/>
	<xsl:value-of select="concat($INDENT_STR,' */',$_CR)"/>
</xsl:template>

<!--
    [0] => Traversable
    [1] => IteratorAggregate
    [2] => Iterator
    [3] => ArrayAccess
    [4] => reflector
    [5] => RecursiveIterator
    [6] => SeekableIterator
-->
<xsl:template name="ZEND_ITERATOR">
	<xsl:call-template name="COMMON_ZEND" />
</xsl:template>

<xsl:template name="ZEND_ITERATORAGGREGATE">
	<xsl:value-of select="concat($INDENT_STR,'public function getIterator() {',$_CR)"/>
	<xsl:value-of select="concat($_CR,$INDENT_STR,'}',$_CR,$_CR)"/>
</xsl:template>

<xsl:template name="ZEND_RECURSIVEITERATOR">
	<xsl:value-of select="concat($INDENT_STR,'public function hasChildren() {',$_CR)"/>
	<xsl:value-of select="concat($_CR,$INDENT_STR,'}',$_CR,$_CR)"/>
	<xsl:value-of select="concat($INDENT_STR,'public function getChildren() {',$_CR)"/>
	<xsl:value-of select="concat($_CR,$INDENT_STR,'}',$_CR,$_CR)"/>
	<xsl:call-template name="COMMON_ZEND" />
</xsl:template>

<xsl:template name="ZEND_SEEKABLEITERATOR">
	<xsl:value-of select="concat($INDENT_STR,'public function seek($position) {',$_CR)"/>
	<xsl:value-of select="concat($_CR,$INDENT_STR,'}',$_CR,$_CR)"/>
	<xsl:call-template name="COMMON_ZEND" />
</xsl:template>

<xsl:template name="COMMON_ZEND">
	<xsl:value-of select="concat($INDENT_STR,'public function current() {',$_CR)"/>
	<xsl:value-of select="concat($_CR,$INDENT_STR,'}',$_CR,$_CR)"/>
	<xsl:value-of select="concat($INDENT_STR,'public function next() {',$_CR)"/>
	<xsl:value-of select="concat($_CR,$INDENT_STR,'}',$_CR,$_CR)"/>
	<xsl:value-of select="concat($INDENT_STR,'public function key() {',$_CR)"/>
	<xsl:value-of select="concat($_CR,$INDENT_STR,'}',$_CR,$_CR)"/>
	<xsl:value-of select="concat($INDENT_STR,'public function valid() {',$_CR)"/>
	<xsl:value-of select="concat($_CR,$INDENT_STR,'}',$_CR,$_CR)"/>
	<xsl:value-of select="concat($INDENT_STR,'public function rewind() {',$_CR)"/>
	<xsl:value-of select="concat($_CR,$INDENT_STR,'}',$_CR,$_CR)"/>
</xsl:template>

<xsl:template name="ZEND_ARRAYACCESS">
	<xsl:value-of select="concat($INDENT_STR,'public function offsetExists($offset) {',$_CR)"/>
	<xsl:value-of select="concat($_CR,$INDENT_STR,'}',$_CR,$_CR)"/>
	<xsl:value-of select="concat($INDENT_STR,'public function offsetGet($offset) {',$_CR)"/>
	<xsl:value-of select="concat($_CR,$INDENT_STR,'}',$_CR,$_CR)"/>
	<xsl:value-of select="concat($INDENT_STR,'public function offsetSet($offset, $value) {',$_CR)"/>
	<xsl:value-of select="concat($_CR,$INDENT_STR,'}',$_CR,$_CR)"/>
	<xsl:value-of select="concat($INDENT_STR,'public function offsetUnset($offset) {',$_CR)"/>
	<xsl:value-of select="concat($_CR,$INDENT_STR,'}',$_CR,$_CR)"/>
</xsl:template>

<!-- Added by KDO 2004-07-26 -->
<xsl:template name="SETTER_GETTERS">
	<xsl:param name="CID"/>
	<xsl:value-of select="concat($_CR,$INDENT_STR,'// setters / getters',$_CR,$_CR)"/>
	<xsl:for-each select="//class[@id=$CID]/attributes/attribute[@visibility='private']">
		<xsl:variable name="varname" select="normalize-space(translate(name,'$',' '))"/>
		<xsl:value-of select="concat($_CR,$INDENT_STR,'public function set_')"/>
		<xsl:value-of select="concat($varname,'($value) {',$_CR)"/>
		<xsl:value-of select="concat($INDENT_STR,$INDENT_STR,'$this->')"/>
		<xsl:value-of select="concat($varname,' = $value;')"/>
		<xsl:value-of select="concat($_CR,$INDENT_STR,'}',$_CR)"/>
	
		<xsl:value-of select="concat($_CR,$INDENT_STR,'public function get_')"/>
		<xsl:value-of select="concat($varname,'() {',$_CR)"/>
		<xsl:value-of select="concat($INDENT_STR,$INDENT_STR,'return $this->')"/>
		<xsl:value-of select="concat($varname,';')"/>
		<xsl:value-of select="concat($_CR,$INDENT_STR,'}',$_CR,$_CR)"/>
	</xsl:for-each>
</xsl:template>

  <xsl:template match="text()">    
  </xsl:template>

  <xsl:template match="node()|@*">
    <xsl:apply-templates match="node()|@*"/>  
  </xsl:template>

</xsl:stylesheet>